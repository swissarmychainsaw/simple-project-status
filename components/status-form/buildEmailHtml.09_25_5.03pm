/* components/status-form/buildEmailHtml.ts
 *
 * Email-safe renderer for EML + SMTP send.
 * - 900px max width card
 * - CID or URL banner (no CSS backgrounds)
 * - Title bar, Program Summary, Status row, Team row
 * - Sections: Exec Summary, Highlights, Milestones, Key Decisions, Risks, Resources
 */

import {
  BANNERS,
  normalizeBannerKey,
  type BannerKey,
} from "./projectProfiles";

type AnyRec = Record<string, any>;
export type FormData = AnyRec;
export type DesignOptions = AnyRec;

// === Layout ===
const EMAIL_MAX_WIDTH = 900; // per request

// ---------- helpers ----------
const escapeHtml = (s: any) =>
  String(s ?? "")
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;");

const hasHtml = (s: string) => /<\/?[a-z][\s\S]*>/i.test(s);

/** Remove background images/attrs but keep other inline styles */
function stripInlineBackgrounds(html: string) {
  if (!html) return "";
  let out = html.replace(/\sbackground\s*=\s*(".*?"|'.*?'|\S+)/gi, "");
  out = out.replace(/\sstyle=("([^"]*)"|'([^']*)')/gi, (_m, _attr, dq, sq) => {
    const style = (dq ?? sq ?? "").replace(
      /(background(?:-image)?\s*:\s*url\([^)]+\)\s*;?)/gi,
      ""
    );
    const cleaned = style.trim().replace(/;+\s*$/g, "");
    if (!cleaned) return "";
    const quote = dq != null ? '"' : "'";
    return ` style=${quote}${cleaned}${quote}`;
  });
  return out;
}

function sanitizeHtmlLoose(s: any) {
  const html = String(s ?? "");
  if (!html) return "";
  const noDanger = html
    .replace(/<\s*script[\s\S]*?<\s*\/\s*script\s*>/gi, "")
    .replace(/<\s*style[\s\S]*?<\s*\/\s*style\s*>/gi, "");
  return stripInlineBackgrounds(noDanger);
}

function nlToParas(s: any) {
  const t = String(s ?? "").trim();
  if (!t) return "";
  const lines = t.split(/\r?\n/).map((x) => x.trim());
  return lines.map((x) => (x ? `<p>${escapeHtml(x)}</p>` : "<p>&nbsp;</p>")).join("");
}

function pickSection(fd: AnyRec, htmlKey: string, plainKey?: string) {
  const html = String(fd?.[htmlKey] ?? "");
  if (html && hasHtml(html)) return sanitizeHtmlLoose(html);
  if (html && !hasHtml(html)) return nlToParas(html);
  if (plainKey) {
    const txt = String(fd?.[plainKey] ?? "");
    if (txt) return nlToParas(txt);
  }
  return "";
}

function formatAsOf(ymd: string | undefined) {
  if (!ymd) return "";
  const m = /^(\d{4})-(\d{2})-(\d{2})$/.exec(ymd);
  if (!m) return ymd;
  const [_, y, mo, d] = m;
  try {
    const dt = new Date(Number(y), Number(mo) - 1, Number(d));
    return dt.toLocaleDateString(undefined, { year: "numeric", month: "short", day: "numeric" });
  } catch {
    return ymd;
  }
}

type DensityName = "comfortable" | "cozy" | "compact";
const scaleForDensity = (d: DensityName | undefined) => (d === "compact" ? 0.8 : d === "cozy" ? 0.9 : 1);

function pill(s: string, sizePx: number) {
  const c = (s || "").toLowerCase();
  const map: Record<string, { bg: string; fg: string }> = {
    green: { bg: "#27c08a", fg: "#ffffff" },
    yellow: { bg: "#f4c542", fg: "#111111" },
    red: { bg: "#e5534b", fg: "#ffffff" },
  };
  const { bg, fg } = map[c] ?? map.green;
  const padY = Math.max(3, Math.round(sizePx * 0.25));
  const padX = Math.max(6, Math.round(sizePx * 0.6));
  return `<span style="display:inline-block;background:${bg};color:${fg};border-radius:999px;padding:${padY}px ${padX}px;font-weight:700;font-size:${sizePx}px;line-height:1">${escapeHtml(
    s
  )}</span>`;
}

// ---------- banner HTML ----------
function renderBanner(opts: DesignOptions, fallbackAccent = "#0A66C2"): string {
  const mode = (opts?.optBannerMode ?? "cid") as "cid" | "url" | "none";
  const accent = String(opts?.optAccent || fallbackAccent);

  if (mode === "none") {
    // thin accent bar only
    return `
      <table width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse:collapse;margin:0 0 24px 0">
        <tr><td style="height:6px;background:${escapeHtml(accent)};font-size:0;line-height:0">&nbsp;</td></tr>
      </table>`.trim();
  }

  const rawKey: string =
    String(opts?.optBannerId || "").trim() ||
    "gns";
  const key = normalizeBannerKey(rawKey) as BannerKey;
  const meta = BANNERS[key];

  if (mode === "url") {
    const src = String(opts?.optBannerUrl || meta?.web || "").trim();
    if (!src) {
      // fallback to accent bar if no URL available
      return `
        <table width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse:collapse;margin:0 0 24px 0">
          <tr><td style="height:6px;background:${escapeHtml(accent)};font-size:0;line-height:0">&nbsp;</td></tr>
        </table>`.trim();
    }
    return `<img src="${escapeHtml(src)}" alt="${escapeHtml(meta?.alt || "")}" style="display:block;width:100%;height:auto;border:0;outline:none;text-decoration:none">`;
  }

  // mode === "cid"
  const cid = meta?.cid;
  if (!cid) {
    // fallback to accent bar if no CID
    return `
      <table width="100%" cellpadding="0" cellspacing="0" border="0" style="border-collapse:collapse;margin:0 0 24px 0">
        <tr><td style="height:6px;background:${escapeHtml(accent)};font-size:0;line-height:0">&nbsp;</td></tr>
      </table>`.trim();
  }
  return `<img src="cid:${escapeHtml(cid)}" alt="${escapeHtml(meta?.alt || "")}" style="display:block;width:100%;height:auto;border:0;outline:none;text-decoration:none">`;
}

// ---------- main ----------
export function buildEmailHtml(fd: FormData, opts: DesignOptions): string {
  fd = fd || {};
  opts = opts || {};

  const density = (opts.optDensity ?? "comfortable") as DensityName;
  const k = scaleForDensity(density);
  const px = (n: number) => `${Math.round(n * k)}px`;

  const font = opts.optFont || "Arial, Helvetica, sans-serif";
  const baseText = `font-family:${font};color:#111111;`;
  const base = `${baseText}font-size:${px(16)};line-height:1.45;`;
  const baseSmall = `${baseText}font-size:${px(14)};line-height:1.6;`;
  const h1 = `${baseText}font-size:${px(20)};line-height:1.25;font-weight:800;`;
  const h2 = `${baseText}font-size:${px(16)};line-height:1.2;font-weight:700;`;

  // containers
  const pageBg = `border-collapse:collapse;background:#f5f7fb`;
  const card = `margin:0 auto;max-width:${EMAIL_MAX_WIDTH}px;border-collapse:collapse;background:#ffffff;border-radius:8px;overflow:hidden`;
  const inner = `border-collapse:collapse;width:100%`;

  // cells
  const cell = `${base}padding:${px(16)};`;
  const cellLeft = `${cell}text-align:left;vertical-align:top;`;
  const cellTitleBar = `${h1}padding:${px(14)} ${px(16)};background:#e5e7eb;`;
  const cellSummary = `${base}padding:${px(16)};background:#ffffff;`;
  const cellRuleTop = `border-top:1px solid #e5e7eb;`;
  const th = `${baseSmall};font-weight:700;text-align:center;padding:${px(10)};background:#f5f5f5;border:1px solid #e5e7eb;`;
  const tdC = `${baseSmall};text-align:center;padding:${px(10)};border:1px solid #e5e7eb;`;
  const tdL = `${baseSmall};text-align:left;padding:${px(10)};border:1px solid #e5e7eb;`;

  // derived
  const programTitle = String(fd.programTitle || fd.title || "Your Program/Project Title here");
  const asOf = formatAsOf(fd.asOf);

  // sections
  const execHtml = pickSection(fd, "execSummaryHtml", "execSummary");
  const highlightsHtml = pickSection(fd, "highlightsHtml");
  const milestonesHtml = pickSection(fd, "milestonesHtml");
  const keyDecisionsHtml = pickSection(fd, "keyDecisionsHtml");
  const risksHtml = pickSection(fd, "risksHtml");
  const resourcesHtml = pickSection(fd, "resourcesHtml");

  // labels
  const execTitle = String(fd.execSummaryTitle || "Executive Summary");
  const highlightsTitle = String(fd.highlightsTitle || "Highlights / Accomplishments");
  const milestonesTitle = String(fd.milestonesTitle || "Upcoming Milestones");
  const kdTitle = String(fd.keyDecisionsTitle || "Key Decisions");
  const risksTitle = String(fd.risksTitle || "Risks & Issue Mitigation Plan");
  const resourcesTitle = String(fd.resourcesTitle || "Additional Resources");

  // pills
  const lastStatus = pill(String(fd.lastStatus || "Green"), Math.round(14 * k));
  const currentStatus = pill(String(fd.currentStatus || "Green"), Math.round(14 * k));
  const trending = pill(String(fd.trending || "Green"), Math.round(14 * k));

  // team
  const tpm = String(fd.tpm || "");
  const engDri = String(fd.engDri || "");
  const bizSponsor = String(fd.bizSponsor || "");
  const engSponsor = String(fd.engSponsor || "");

  // banner (cid/url/none) using the same source of truth as the send route
  const bannerHtml = renderBanner(opts, String(opts?.optAccent || "#0A66C2"));

  const section = (title: string, html: string) =>
    !html
      ? ""
      : `
  <table width="100%" cellpadding="0" cellspacing="0" border="0" style="${inner};margin:${px(0)} 0 ${px(16)} 0">
    <tr><td style="${h2}padding:${px(12)} ${px(0)} ${px(8)} ${px(0)}">${escapeHtml(title)}</td></tr>
    <tr><td style="${cellLeft}">${html}</td></tr>
  </table>`.trim();

  const programSummaryHtml =
    pickSection(fd, "programSummaryHtml", "programSummary") || "";

  return `
<!doctype html>
<html>
  <head>
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>${escapeHtml(programTitle)}</title>
  </head>
  <body style="margin:0;padding:0;background:#f5f7fb">
    <table width="100%" cellpadding="0" cellspacing="0" border="0" style="${pageBg}">
      <tr>
        <td style="padding:${px(24)}">
          <table width="100%" cellpadding="0" cellspacing="0" border="0" align="center" style="${card}">
            <!-- Banner -->
            <tr><td style="padding:0">${bannerHtml}</td></tr>

            <!-- Title bar -->
            <tr>
              <td style="${cellTitleBar}">
                ${escapeHtml(programTitle)}
                ${asOf ? `<div style="${baseSmall};color:#6b7280;margin-top:${px(2)}">As of ${escapeHtml(asOf)}</div>` : ""}
              </td>
            </tr>

            <!-- Program Summary (paragraph block) -->
            ${programSummaryHtml ? `<tr><td style="${cellSummary}">${programSummaryHtml}</td></tr>` : ""}

            <!-- Status row -->
            <tr>
              <td style="${cellRuleTop}padding:${px(16)} ${px(16)} ${px(8)} ${px(16)}">
                <table role="presentation" width="100%" style="${inner}" cellpadding="0" cellspacing="0" border="0">
                  <tr>
                    <th style="${th}">Last Status</th>
                    <th style="${th}">Current Status</th>
                    <th style="${th}">Trending</th>
                    <th style="${th}">Date</th>
                  </tr>
                  <tr>
                    <td style="${tdC}">${lastStatus}</td>
                    <td style="${tdC}">${currentStatus}</td>
                    <td style="${tdC}">${trending}</td>
                    <td style="${tdC}">${escapeHtml(asOf)}</td>
                  </tr>
                </table>
              </td>
            </tr>

            <!-- Team row -->
            <tr>
              <td style="padding:${px(8)} ${px(16)} ${px(16)} ${px(16)}">
                <table role="presentation" width="100%" style="${inner}" cellpadding="0" cellspacing="0" border="0">
                  <tr>
                    <th style="${th}">TPM</th>
                    <th style="${th}">Engineering DRI</th>
                    <th style="${th}">Business Sponsor</th>
                    <th style="${th}">Engineering Sponsor</th>
                  </tr>
                  <tr>
                    <td style="${tdC}">${escapeHtml(tpm)}</td>
                    <td style="${tdC}">${escapeHtml(engDri)}</td>
                    <td style="${tdC}">${escapeHtml(bizSponsor)}</td>
                    <td style="${tdC}">${escapeHtml(engSponsor)}</td>
                  </tr>
                </table>
              </td>
            </tr>

            <!-- Sections -->
            <tr><td style="padding:${px(8)} ${px(16)} ${px(16)} ${px(16)}">
              ${section(execTitle, execHtml)}
              ${section(highlightsTitle, highlightsHtml)}
              ${section(milestonesTitle, milestonesHtml)}
              ${section(kdTitle, keyDecisionsHtml)}
              ${section(risksTitle, risksHtml)}
              ${section(resourcesTitle, resourcesHtml)}
            </td></tr>
          </table>

          <div style="text-align:center;color:#9aa3b2;font-size:${px(11)};margin-top:${px(16)}">
            Generated by Project Status • ${escapeHtml(asOf || new Date().toISOString().slice(0, 10))}
          </div>
        </td>
      </tr>
    </table>
  </body>
</html>
`.trim();
}

export default buildEmailHtml;

